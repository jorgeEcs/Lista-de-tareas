{"version":3,"sources":["config.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TODO_LIST_ABI","TodoList","tasks","createTask","completed","useState","value","setValue","id","onSubmit","e","preventDefault","type","className","placeholder","required","onChange","target","hidden","map","task","key","htmlFor","defaultChecked","console","log","name","content","App","account","setAccount","setTaskCount","setTasks","loading","setLoading","todoList","setTodoList","a","window","ethereum","array","web3","Web3","givenProvider","eth","getAccounts","accounts","Contract","methods","taskCount","call","taskC","i","push","alert","send","from","on","receipt","taskId","toggleCompleted","useEffect","loadBlockChainData","href","role","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e469e10.chunk.js","sourcesContent":["export const TODO_LIST_ADDRESS = '0xeE3131e6BBF9c59c440874152106d94642Ad077d'\r\nexport const TODO_LIST_ABI=[\r\n  {\r\n      \"name\": \"tasks\",\r\n      \"type\": \"function\",\r\n      \"inputs\": [\r\n          {\r\n              \"name\": \"\",\r\n              \"type\": \"uint256\"\r\n          }\r\n      ],\r\n      \"outputs\": [\r\n          {\r\n              \"name\": \"id\",\r\n              \"type\": \"uint256\"\r\n          },\r\n          {\r\n              \"name\": \"content\",\r\n              \"type\": \"string\"\r\n          },\r\n          {\r\n              \"name\": \"completed\",\r\n              \"type\": \"bool\"\r\n          }\r\n      ],\r\n      \"payable\": false,\r\n      \"constant\": true,\r\n      \"stateMutability\": \"view\"\r\n  },\r\n  {\r\n      \"name\": \"taskCount\",\r\n      \"type\": \"function\",\r\n      \"inputs\": [],\r\n      \"outputs\": [\r\n          {\r\n              \"name\": \"\",\r\n              \"type\": \"uint256\"\r\n          }\r\n      ],\r\n      \"payable\": false,\r\n      \"constant\": true,\r\n      \"stateMutability\": \"view\"\r\n  },\r\n  {\r\n      \"type\": \"constructor\",\r\n      \"inputs\": [],\r\n      \"payable\": false,\r\n      \"stateMutability\": \"nonpayable\"\r\n  },\r\n  {\r\n      \"name\": \"TaskCreated\",\r\n      \"type\": \"event\",\r\n      \"inputs\": [\r\n          {\r\n              \"name\": \"id\",\r\n              \"type\": \"uint256\",\r\n              \"indexed\": false\r\n          },\r\n          {\r\n              \"name\": \"content\",\r\n              \"type\": \"string\",\r\n              \"indexed\": false\r\n          },\r\n          {\r\n              \"name\": \"completed\",\r\n              \"type\": \"bool\",\r\n              \"indexed\": false\r\n          }\r\n      ],\r\n      \"anonymous\": false\r\n  },\r\n  {\r\n      \"name\": \"TaskCompleted\",\r\n      \"type\": \"event\",\r\n      \"inputs\": [\r\n          {\r\n              \"name\": \"id\",\r\n              \"type\": \"uint256\",\r\n              \"indexed\": false\r\n          },\r\n          {\r\n              \"name\": \"completed\",\r\n              \"type\": \"bool\",\r\n              \"indexed\": false\r\n          }\r\n      ],\r\n      \"anonymous\": false\r\n  },\r\n  {\r\n      \"name\": \"createTask\",\r\n      \"type\": \"function\",\r\n      \"inputs\": [\r\n          {\r\n              \"name\": \"_content\",\r\n              \"type\": \"string\"\r\n          }\r\n      ],\r\n      \"outputs\": [],\r\n      \"payable\": false,\r\n      \"constant\": false,\r\n      \"stateMutability\": \"nonpayable\"\r\n  },\r\n  {\r\n      \"name\": \"toggleCompleted\",\r\n      \"type\": \"function\",\r\n      \"inputs\": [\r\n          {\r\n              \"name\": \"_id\",\r\n              \"type\": \"uint256\"\r\n          }\r\n      ],\r\n      \"outputs\": [],\r\n      \"payable\": false,\r\n      \"constant\": false,\r\n      \"stateMutability\": \"nonpayable\"\r\n  }\r\n]","import React,{useState} from \"react\";\r\nfunction TodoList({tasks, createTask, completed}) {\r\n    const [value,setValue] = useState('');\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        createTask(value);\r\n    }\r\n    const handleInputChange=(e)=>{\r\n        setValue(e.target.value);\r\n    }\r\n    const Completed= (id)=>{\r\n        console.log(id);\r\n        completed(id);\r\n    }\r\n    return (\r\n        <div id=\"content\">\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            id=\"newTask\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Nueva tarea...\"\r\n            required\r\n            onChange={handleInputChange}\r\n            />\r\n            <input\r\n            type=\"submit\"\r\n            className=\"btn btn-primary btn-block mt-3\"\r\n            hidden=\"\"\r\n            value=\"Agregar tarea\"\r\n            />\r\n        </form>\r\n        <ul id=\"taskList\" className=\"list-unstyled\">\r\n            {tasks.map((task) => (\r\n            <div className=\"taskTemplate\" key={task.id}>\r\n                <label htmlFor=\"\">\r\n                <input type=\"checkbox\" defaultChecked={task.completed} onChange={()=>Completed(task.id)} name=\"\" id=\"\" />\r\n                <span className=\"ml-3 content\">{task.content}</span>\r\n                </label>\r\n            </div>\r\n            ))}\r\n        </ul>\r\n        <ul id=\"completedTaskList\" className=\"list-unstyled\"></ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport { TODO_LIST_ABI, TODO_LIST_ADDRESS } from \"./config\";\r\nimport \"./App.css\";\r\nimport TodoList from \"./TodoList\";\r\nfunction App() {\r\n  const [account, setAccount] = useState(\"\");\r\n  const [taskCount, setTaskCount] = useState(0);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [todoList, setTodoList] = useState({});\r\n  async function loadBlockChainData() {\r\n    if (typeof window.ethereum !== \"undefined\") {\r\n      const array=[];\r\n      const web3 = new Web3(Web3.givenProvider || \"http://127.0.0.1:7645\");\r\n      // const network = await web3.eth.net.getNetworkType();\r\n      const accounts = await web3.eth.getAccounts();\r\n      setAccount(accounts[0]);\r\n      const todoList = new web3.eth.Contract(TODO_LIST_ABI, TODO_LIST_ADDRESS);\r\n      setTodoList(todoList);\r\n      const taskC = await todoList.methods.taskCount().call();\r\n      setTaskCount(taskC);\r\n      for (let i = 1; i <= taskC; i++) {\r\n        const task = await todoList.methods.tasks(i).call();\r\n        array.push(task);\r\n      }\r\n      setTasks(array);\r\n      setLoading(false);\r\n    } else {\r\n      window.alert(\"No tienes instalado Metamask\");\r\n    }\r\n  }\r\n  const createTask = async(content) => {\r\n    setLoading(true);\r\n    await todoList.methods\r\n      .createTask(content)\r\n      .send({ from: account })\r\n      .on(\"receipt\", (receipt) => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n  const completed = async(taskId) => {\r\n    setLoading(true);\r\n    await todoList.methods\r\n      .toggleCompleted(taskId)\r\n      .send({ from: account })\r\n      .on(\"receipt\", (receipt) => {\r\n        setLoading(false);\r\n      });\r\n  }; \r\n  useEffect(() => {\r\n    loadBlockChainData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Container\">\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"#\">\r\n          Todo List\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small>\r\n              <a className=\"nav-link\" href=\"#\">\r\n                <span id=\"account\"></span>\r\n              </a>\r\n            </small>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 d-flex justify-content-center\">\r\n            {loading ? (\r\n              <div id=\"loader\" className=\"text-center\">\r\n                <p className=\"text-center\">Loading...</p>\r\n              </div>\r\n            ) : (\r\n              <TodoList tasks={tasks} createTask={createTask} completed={completed}/>\r\n            )}\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}